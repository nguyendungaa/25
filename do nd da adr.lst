
AVRASM ver. 2.1.30  C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm Sat Apr 15 16:30:59 2023

C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1059): warning: Register r5 already defined by the .DEF directive
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1060): warning: Register r6 already defined by the .DEF directive
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1061): warning: Register r8 already defined by the .DEF directive
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1063): warning: Register r11 already defined by the .DEF directive
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1064): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cd=R5
                 	.DEF _temp=R6
                 	.DEF _adc=R8
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x1C:
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1102): warning: .cseg .db misalignment - padding zero byte
000033 0032      	.DB  0x32
                 _0x0:
000034 6f44
000035 4e20
000036 6968
000037 7465      	.DB  0x44,0x6F,0x20,0x4E,0x68,0x69,0x65,0x74
000038 4420
000039 206f
00003a 434c
00003b 2044      	.DB  0x20,0x44,0x6F,0x20,0x4C,0x43,0x44,0x20
00003c 4200
00003d 6f61
00003e 4e20
00003f 6968      	.DB  0x0,0x42,0x61,0x6F,0x20,0x4E,0x68,0x69
000040 7465
000041 4420
000042 206f
000043 6143      	.DB  0x65,0x74,0x20,0x44,0x6F,0x20,0x43,0x61
000044 006f
000045 754d
000046 2063
000047 6163      	.DB  0x6F,0x0,0x4D,0x75,0x63,0x20,0x63,0x61
000048 2069
000049 6164
00004a 3a74
00004b 0020      	.DB  0x69,0x20,0x64,0x61,0x74,0x3A,0x20,0x0
00004c 2043
00004d 4e00
00004e 6968
00004f 7465      	.DB  0x43,0x20,0x0,0x4E,0x68,0x69,0x65,0x74
000050 6420
000051 3a6f
000052 0020
000053 4320      	.DB  0x20,0x64,0x6F,0x3A,0x20,0x0,0x20,0x43
000054 2020
C:\Users\dn435\Desktop\code nhiet do\code nhiet do\do nd da adr.asm(1112): warning: .cseg .db misalignment - padding zero byte
000055 0000      	.DB  0x20,0x20,0x0
                 _0x2040003:
000056 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000057 0001      	.DW  0x01
000058 0005      	.DW  0x05
000059 0066      	.DW  _0x1C*2
                 
00005a 0002      	.DW  0x02
00005b 0160      	.DW  __base_y_G102
00005c 00ac      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bffb      	OUT  GICR,R31
000063 bfeb      	OUT  GICR,R30
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000065 e1f8      	LDI  R31,0x18
000066 bdf1      	OUT  WDTCR,R31
000067 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000068 e08d      	LDI  R24,(14-2)+1
000069 e0a2      	LDI  R26,2
00006a 27bb      	CLR  R27
                 __CLEAR_REG:
00006b 93ed      	ST   X+,R30
00006c 958a      	DEC  R24
00006d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000070 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000071 93ed      	ST   X+,R30
000072 9701      	SBIW R24,1
000073 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000074 eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000075 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000076 9185      	LPM  R24,Z+
000077 9195      	LPM  R25,Z+
000078 9700      	SBIW R24,0
000079 f061      	BREQ __GLOBAL_INI_END
00007a 91a5      	LPM  R26,Z+
00007b 91b5      	LPM  R27,Z+
00007c 9005      	LPM  R0,Z+
00007d 9015      	LPM  R1,Z+
00007e 01bf      	MOVW R22,R30
00007f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000080 9005      	LPM  R0,Z+
000081 920d      	ST   X+,R0
000082 9701      	SBIW R24,1
000083 f7e1      	BRNE __GLOBAL_INI_LOOP
000084 01fb      	MOVW R30,R22
000085 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000086 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000087 bfed      	OUT  SPL,R30
000088 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000089 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008c 940c 0098 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;//Clock frequency     : 8.000000 MHz
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;// Khai bao giao tiep LCD
                 ;#asm
                 .equ __lcd_port=0x12 ;PORTC
                 ; 0000 0006 #endasm
                 ;#define up    PINB.0
                 ;#define down    PINB.1
                 ;
                 ;#define loa    PORTC.0
                 ;unsigned char cd=50;
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;#include <lcd.h>
                 ;#include <delay.h>
                 ;#define ADC_VREF_TYPE 0x00
                 ;//khai bao bien
                 ;int temp,adc;
                 ;// Ham doc nhiet do
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _read_adc:
                 ; 0000 0016 ADMUX=adc_input|ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
00008e 81e8      	LD   R30,Y
00008f b9e7      	OUT  0x7,R30
                 ; 0000 0017 // bat dau doc
                 ; 0000 0018 ADCSRA|=0x40;
000090 9a36      	SBI  0x6,6
                 ; 0000 0019 // cho doc xong
                 ; 0000 001A while ((ADCSRA & 0x10)==0);
                 _0x3:
000091 9b34      	SBIS 0x6,4
000092 cffe      	RJMP _0x3
                 ; 0000 001B ADCSRA|=0x10;
000093 9a34      	SBI  0x6,4
                 ; 0000 001C return ADCW;
000094 b1e4      	IN   R30,0x4
000095 b1f5      	IN   R31,0x4+1
000096 940c 01f9 	JMP  _0x2080001
                 ; 0000 001D }
                 ;void main(void)
                 ; 0000 001F {
                 _main:
                 ; 0000 0020 PORTA=0x00;
000098 e0e0      	LDI  R30,LOW(0)
000099 bbeb      	OUT  0x1B,R30
                 ; 0000 0021 DDRA=0xF0;
00009a efe0      	LDI  R30,LOW(240)
00009b bbea      	OUT  0x1A,R30
                 ; 0000 0022 PORTB=0x00;
00009c e0e0      	LDI  R30,LOW(0)
00009d bbe8      	OUT  0x18,R30
                 ; 0000 0023 DDRB=0xF0;
00009e efe0      	LDI  R30,LOW(240)
00009f bbe7      	OUT  0x17,R30
                 ; 0000 0024 PORTC=0x00;
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bbe5      	OUT  0x15,R30
                 ; 0000 0025 DDRC=0xFF;
0000a2 efef      	LDI  R30,LOW(255)
0000a3 bbe4      	OUT  0x14,R30
                 ; 0000 0026 PORTD=0x00;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bbe2      	OUT  0x12,R30
                 ; 0000 0027 DDRD=0xFF;
0000a6 efef      	LDI  R30,LOW(255)
0000a7 bbe1      	OUT  0x11,R30
                 ; 0000 0028 // khoi tao ADC
                 ; 0000 0029 ADMUX=ADC_VREF_TYPE;
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 b9e7      	OUT  0x7,R30
                 ; 0000 002A ADCSRA=0x83;
0000aa e8e3      	LDI  R30,LOW(131)
0000ab b9e6      	OUT  0x6,R30
                 ; 0000 002B // cho phap ngat
                 ; 0000 002C #asm("sei")
0000ac 9478      	sei
                 ; 0000 002D loa=1;
0000ad 9aa8      	SBI  0x15,0
                 ; 0000 002E lcd_init(16);
0000ae e1e0      	LDI  R30,LOW(16)
0000af 93ea      	ST   -Y,R30
0000b0 940e 01c7 	CALL _lcd_init
                 ; 0000 002F lcd_gotoxy(0,0);
0000b2 940e 01fb 	CALL SUBOPT_0x0
                 ; 0000 0030 lcd_putsf("Do Nhiet Do LCD ");
                +
0000b4 e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b6 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 0031 lcd_gotoxy(0,1);
0000b8 940e 0204 	CALL SUBOPT_0x2
                 ; 0000 0032 lcd_putsf("Bao Nhiet Do Cao");
                +
0000ba e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
0000bb e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
0000bc 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 0033 delay_ms(1000);
0000be eee8      	LDI  R30,LOW(1000)
0000bf e0f3      	LDI  R31,HIGH(1000)
0000c0 93fa      	ST   -Y,R31
0000c1 93ea      	ST   -Y,R30
0000c2 940e 0219 	CALL _delay_ms
                 ; 0000 0034 while (1)
                 _0x8:
                 ; 0000 0035       {
                 ; 0000 0036        lcd_gotoxy(0,0); lcd_putsf("Muc cai dat: ");
0000c4 940e 01fb 	CALL SUBOPT_0x0
                +
0000c6 e8ea     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
0000c7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
0000c8 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 0037        lcd_putchar(cd/10+0x30); lcd_putchar(cd%10+0x30);lcd_putsf("C ");
0000ca 2da5      	MOV  R26,R5
0000cb e0ea      	LDI  R30,LOW(10)
0000cc 940e 030f 	CALL __DIVB21U
0000ce 940e 020a 	CALL SUBOPT_0x3
0000d0 2da5      	MOV  R26,R5
0000d1 e0ea      	LDI  R30,LOW(10)
0000d2 940e 0335 	CALL __MODB21U
0000d4 940e 020a 	CALL SUBOPT_0x3
                +
0000d6 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 48 ) )
0000d7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW1FN _0x0,48
0000d8 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 0038       adc = read_adc(PORTA.0);
0000da e0e0      	LDI  R30,0
0000db 99d8      	SBIC 0x1B,0
0000dc e0e1      	LDI  R30,1
0000dd 93ea      	ST   -Y,R30
0000de dfaf      	RCALL _read_adc
0000df 014f      	MOVW R8,R30
                 ; 0000 0039       temp = adc/2.046;
0000e0 01f4      	MOVW R30,R8
0000e1 940e 030a 	CALL __CWD1
0000e3 940e 028b 	CALL __CDF1
0000e5 01df      	MOVW R26,R30
0000e6 01cb      	MOVW R24,R22
                +
0000e7 eaea     +LDI R30 , LOW ( 0x4002F1AA )
0000e8 eff1     +LDI R31 , HIGH ( 0x4002F1AA )
0000e9 e062     +LDI R22 , BYTE3 ( 0x4002F1AA )
0000ea e470     +LDI R23 , BYTE4 ( 0x4002F1AA )
                 	__GETD1N 0x4002F1AA
0000eb 940e 02b9 	CALL __DIVF21
0000ed 940e 0254 	CALL __CFD1
0000ef 013f      	MOVW R6,R30
                 ; 0000 003A       lcd_gotoxy(0,1); lcd_putsf("Nhiet do: ");
0000f0 940e 0204 	CALL SUBOPT_0x2
                +
0000f2 e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 51 ) )
0000f3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 51 ) )
                 	__POINTW1FN _0x0,51
0000f4 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 003B       lcd_putchar(temp/10+0x30); lcd_putchar(temp%10+0x30); lcd_putsf(" C  ");
0000f6 01d3      	MOVW R26,R6
0000f7 e0ea      	LDI  R30,LOW(10)
0000f8 e0f0      	LDI  R31,HIGH(10)
0000f9 940e 0330 	CALL __DIVW21
0000fb 940e 020a 	CALL SUBOPT_0x3
0000fd 01d3      	MOVW R26,R6
0000fe e0ea      	LDI  R30,LOW(10)
0000ff e0f0      	LDI  R31,HIGH(10)
000100 940e 0338 	CALL __MODW21
000102 940e 020a 	CALL SUBOPT_0x3
                +
000104 eae6     +LDI R30 , LOW ( 2 * _0x0 + ( 62 ) )
000105 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 62 ) )
                 	__POINTW1FN _0x0,62
000106 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 003C          if(temp>cd) loa = 0; if(temp<cd) loa = 1;
000108 2de5      	MOV  R30,R5
000109 01d3      	MOVW R26,R6
00010a e0f0      	LDI  R31,0
00010b 17ea      	CP   R30,R26
00010c 07fb      	CPC  R31,R27
00010d f40c      	BRGE _0xB
00010e 98a8      	CBI  0x15,0
                 _0xB:
00010f 2de5      	MOV  R30,R5
000110 01d3      	MOVW R26,R6
000111 e0f0      	LDI  R31,0
000112 17ae      	CP   R26,R30
000113 07bf      	CPC  R27,R31
000114 f40c      	BRGE _0xE
000115 9aa8      	SBI  0x15,0
                 ; 0000 003D          if(up==0) { while(up==0){}  if(cd<99) cd++; }
                 _0xE:
000116 99b0      	SBIC 0x16,0
000117 c006      	RJMP _0x11
                 _0x12:
000118 9bb0      	SBIS 0x16,0
000119 cffe      	RJMP _0x12
00011a e6e3      	LDI  R30,LOW(99)
00011b 165e      	CP   R5,R30
00011c f408      	BRSH _0x15
00011d 9453      	INC  R5
                 _0x15:
                 ; 0000 003E          if(down==0) { while(down==0){}  if(cd>0) cd--; }
                 _0x11:
00011e 99b1      	SBIC 0x16,1
00011f c006      	RJMP _0x16
                 _0x17:
000120 9bb1      	SBIS 0x16,1
000121 cffe      	RJMP _0x17
000122 e0e0      	LDI  R30,LOW(0)
000123 15e5      	CP   R30,R5
000124 f408      	BRSH _0x1A
000125 945a      	DEC  R5
                 _0x1A:
                 ; 0000 003F       };
                 _0x16:
000126 cf9d      	RJMP _0x8
                 ; 0000 0040 }
                 _0x1B:
000127 cfff      	RJMP _0x1B
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G102:
000128 e0ff          ldi   r31,15
                 __lcd_delay0:
000129 95fa          dec   r31
00012a f7f1          brne  __lcd_delay0
00012b 9508      	RET
                 __lcd_ready:
00012c b3a1          in    r26,__lcd_direction
00012d 70af          andi  r26,0xf                 ;set as input
00012e bba1          out   __lcd_direction,r26
00012f 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000130 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000131 dff6      	RCALL __lcd_delay_G102
000132 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000133 dff4      	RCALL __lcd_delay_G102
000134 b3a0          in    r26,__lcd_pin
000135 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000136 dff1      	RCALL __lcd_delay_G102
000137 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000138 dfef      	RCALL __lcd_delay_G102
000139 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00013a fda7          sbrc  r26,__lcd_busy_flag
00013b cff5          rjmp  __lcd_busy
00013c 9508      	RET
                 __lcd_write_nibble_G102:
00013d 7fa0          andi  r26,0xf0
00013e 2bab          or    r26,r27
00013f bba2          out   __lcd_port,r26          ;write
000140 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000141 940e 0128 	CALL __lcd_delay_G102
000143 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000144 940e 0128 	CALL __lcd_delay_G102
000146 9508      	RET
                 __lcd_write_data:
000147 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000148 b3a1          in    r26,__lcd_direction
000149 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00014a bba1          out   __lcd_direction,r26
00014b b3b2          in    r27,__lcd_port
00014c 70bf          andi  r27,0xf
00014d 81a8          ld    r26,y
00014e dfee      	RCALL __lcd_write_nibble_G102
00014f 81a8          ld    r26,y
000150 95a2          swap  r26
000151 dfeb      	RCALL __lcd_write_nibble_G102
000152 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000153 940c 01f9 	JMP  _0x2080001
                 __lcd_read_nibble_G102:
000155 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000156 940e 0128 	CALL __lcd_delay_G102
000158 b3e0          in    r30,__lcd_pin           ;read
000159 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00015a 940e 0128 	CALL __lcd_delay_G102
00015c 7fe0          andi  r30,0xf0
00015d 9508      	RET
                 _lcd_read_byte0_G102:
00015e 940e 0128 	CALL __lcd_delay_G102
000160 dff4      	RCALL __lcd_read_nibble_G102
000161 2fae          mov   r26,r30
000162 dff2      	RCALL __lcd_read_nibble_G102
000163 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
000164 95e2          swap  r30
000165 2bea          or    r30,r26
000166 9508      	RET
                 _lcd_gotoxy:
000167 940e 012c 	CALL __lcd_ready
000169 81e8      	LD   R30,Y
00016a e0f0      	LDI  R31,0
00016b 5ae0      	SUBI R30,LOW(-__base_y_G102)
00016c 4ffe      	SBCI R31,HIGH(-__base_y_G102)
00016d 81e0      	LD   R30,Z
00016e 81a9      	LDD  R26,Y+1
00016f 0fea      	ADD  R30,R26
000170 93ea      	ST   -Y,R30
000171 940e 0147 	CALL __lcd_write_data
000173 8049      	LDD  R4,Y+1
000174 80b8      	LDD  R11,Y+0
000175 9622      	ADIW R28,2
000176 9508      	RET
                 _lcd_clear:
000177 940e 012c 	CALL __lcd_ready
000179 e0e2      	LDI  R30,LOW(2)
00017a 93ea      	ST   -Y,R30
00017b 940e 0147 	CALL __lcd_write_data
00017d 940e 012c 	CALL __lcd_ready
00017f e0ec      	LDI  R30,LOW(12)
000180 93ea      	ST   -Y,R30
000181 940e 0147 	CALL __lcd_write_data
000183 940e 012c 	CALL __lcd_ready
000185 e0e1      	LDI  R30,LOW(1)
000186 93ea      	ST   -Y,R30
000187 940e 0147 	CALL __lcd_write_data
000189 e0e0      	LDI  R30,LOW(0)
00018a 2ebe      	MOV  R11,R30
00018b 2e4e      	MOV  R4,R30
00018c 9508      	RET
                 _lcd_putchar:
00018d 93ef          push r30
00018e 93ff          push r31
00018f 81a8          ld   r26,y
000190 9468          set
000191 30aa          cpi  r26,10
000192 f019          breq __lcd_putchar1
000193 94e8          clt
000194 144a      	CP   R4,R10
000195 f030      	BRLO _0x2040004
                 	__lcd_putchar1:
000196 94b3      	INC  R11
000197 e0e0      	LDI  R30,LOW(0)
000198 93ea      	ST   -Y,R30
000199 92ba      	ST   -Y,R11
00019a dfcc      	RCALL _lcd_gotoxy
00019b f036      	brts __lcd_putchar0
                 _0x2040004:
00019c 9443      	INC  R4
00019d df8e          rcall __lcd_ready
00019e 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
00019f 81a8          ld   r26,y
0001a0 93aa          st   -y,r26
0001a1 dfa5          rcall __lcd_write_data
                 __lcd_putchar0:
0001a2 91ff          pop  r31
0001a3 91ef          pop  r30
0001a4 940c 01f9 	JMP  _0x2080001
                 _lcd_putsf:
0001a6 931a      	ST   -Y,R17
                 _0x2040008:
0001a7 81e9      	LDD  R30,Y+1
0001a8 81fa      	LDD  R31,Y+1+1
0001a9 9631      	ADIW R30,1
0001aa 83e9      	STD  Y+1,R30
0001ab 83fa      	STD  Y+1+1,R31
0001ac 9731      	SBIW R30,1
0001ad 91e4      	LPM  R30,Z
0001ae 2f1e      	MOV  R17,R30
0001af 30e0      	CPI  R30,0
0001b0 f019      	BREQ _0x204000A
0001b1 931a      	ST   -Y,R17
0001b2 dfda      	RCALL _lcd_putchar
0001b3 cff3      	RJMP _0x2040008
                 _0x204000A:
0001b4 8118      	LDD  R17,Y+0
0001b5 9623      	ADIW R28,3
0001b6 9508      	RET
                 __long_delay_G102:
0001b7 27aa          clr   r26
0001b8 27bb          clr   r27
                 __long_delay0:
0001b9 9711          sbiw  r26,1         ;2 cycles
0001ba f7f1          brne  __long_delay0 ;2 cycles
0001bb 9508      	RET
                 __lcd_init_write_G102:
0001bc 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001bd b3a1          in    r26,__lcd_direction
0001be 6fa7          ori   r26,0xf7                ;set as output
0001bf bba1          out   __lcd_direction,r26
0001c0 b3b2          in    r27,__lcd_port
0001c1 70bf          andi  r27,0xf
0001c2 81a8          ld    r26,y
0001c3 940e 013d 	CALL __lcd_write_nibble_G102
0001c5 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0001c6 c032      	RJMP _0x2080001
                 _lcd_init:
0001c7 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0001c8 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
0001c9 80a8      	LDD  R10,Y+0
0001ca 81e8      	LD   R30,Y
0001cb 58e0      	SUBI R30,-LOW(128)
                +
0001cc 93e0 0162+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
0001ce 81e8      	LD   R30,Y
0001cf 54e0      	SUBI R30,-LOW(192)
                +
0001d0 93e0 0163+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
0001d2 940e 020e 	CALL SUBOPT_0x4
0001d4 940e 020e 	CALL SUBOPT_0x4
0001d6 940e 020e 	CALL SUBOPT_0x4
0001d8 dfde      	RCALL __long_delay_G102
0001d9 e2e0      	LDI  R30,LOW(32)
0001da 93ea      	ST   -Y,R30
0001db dfe0      	RCALL __lcd_init_write_G102
0001dc dfda      	RCALL __long_delay_G102
0001dd e2e8      	LDI  R30,LOW(40)
0001de 940e 0214 	CALL SUBOPT_0x5
0001e0 e0e4      	LDI  R30,LOW(4)
0001e1 940e 0214 	CALL SUBOPT_0x5
0001e3 e8e5      	LDI  R30,LOW(133)
0001e4 940e 0214 	CALL SUBOPT_0x5
0001e6 b3a1          in    r26,__lcd_direction
0001e7 70af          andi  r26,0xf                 ;set as input
0001e8 bba1          out   __lcd_direction,r26
0001e9 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0001ea 940e 015e 	CALL _lcd_read_byte0_G102
0001ec 30e5      	CPI  R30,LOW(0x5)
0001ed f011      	BREQ _0x204000B
0001ee e0e0      	LDI  R30,LOW(0)
0001ef c009      	RJMP _0x2080001
                 _0x204000B:
0001f0 940e 012c 	CALL __lcd_ready
0001f2 e0e6      	LDI  R30,LOW(6)
0001f3 93ea      	ST   -Y,R30
0001f4 940e 0147 	CALL __lcd_write_data
0001f6 940e 0177 	CALL _lcd_clear
0001f8 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
0001f9 9621      	ADIW R28,1
0001fa 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G102:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 93ea      	ST   -Y,R30
0001fd 93ea      	ST   -Y,R30
0001fe 940c 0167 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000200 93fa      	ST   -Y,R31
000201 93ea      	ST   -Y,R30
000202 940c 01a6 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000204 e0e0      	LDI  R30,LOW(0)
000205 93ea      	ST   -Y,R30
000206 e0e1      	LDI  R30,LOW(1)
000207 93ea      	ST   -Y,R30
000208 940c 0167 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00020a 5de0      	SUBI R30,-LOW(48)
00020b 93ea      	ST   -Y,R30
00020c 940c 018d 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
00020e 940e 01b7 	CALL __long_delay_G102
000210 e3e0      	LDI  R30,LOW(48)
000211 93ea      	ST   -Y,R30
000212 940c 01bc 	JMP  __lcd_init_write_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000214 93ea      	ST   -Y,R30
000215 940e 0147 	CALL __lcd_write_data
000217 940c 01b7 	JMP  __long_delay_G102
                 
                 
                 	.CSEG
                 _delay_ms:
000219 91e9      	ld   r30,y+
00021a 91f9      	ld   r31,y+
00021b 9630      	adiw r30,0
00021c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00021d ed80     +LDI R24 , LOW ( 0x7D0 )
00021e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00021f 9701     +SBIW R24 , 1
000220 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000221 95a8      	wdr
000222 9731      	sbiw r30,1
000223 f7c9      	brne __delay_ms0
                 __delay_ms1:
000224 9508      	ret
                 
                 __ROUND_REPACK:
000225 2355      	TST  R21
000226 f442      	BRPL __REPACK
000227 3850      	CPI  R21,0x80
000228 f411      	BRNE __ROUND_REPACK0
000229 ffe0      	SBRS R30,0
00022a c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00022b 9631      	ADIW R30,1
00022c 1f69      	ADC  R22,R25
00022d 1f79      	ADC  R23,R25
00022e f06b      	BRVS __REPACK1
                 
                 __REPACK:
00022f e850      	LDI  R21,0x80
000230 2757      	EOR  R21,R23
000231 f411      	BRNE __REPACK0
000232 935f      	PUSH R21
000233 c073      	RJMP __ZERORES
                 __REPACK0:
000234 3f5f      	CPI  R21,0xFF
000235 f031      	BREQ __REPACK1
000236 0f66      	LSL  R22
000237 0c00      	LSL  R0
000238 9557      	ROR  R21
000239 9567      	ROR  R22
00023a 2f75      	MOV  R23,R21
00023b 9508      	RET
                 __REPACK1:
00023c 935f      	PUSH R21
00023d 2000      	TST  R0
00023e f00a      	BRMI __REPACK2
00023f c073      	RJMP __MAXRES
                 __REPACK2:
000240 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000241 e850      	LDI  R21,0x80
000242 2e19      	MOV  R1,R25
000243 2215      	AND  R1,R21
000244 0f88      	LSL  R24
000245 1f99      	ROL  R25
000246 2795      	EOR  R25,R21
000247 0f55      	LSL  R21
000248 9587      	ROR  R24
                 
                 __UNPACK1:
000249 e850      	LDI  R21,0x80
00024a 2e07      	MOV  R0,R23
00024b 2205      	AND  R0,R21
00024c 0f66      	LSL  R22
00024d 1f77      	ROL  R23
00024e 2775      	EOR  R23,R21
00024f 0f55      	LSL  R21
000250 9567      	ROR  R22
000251 9508      	RET
                 
                 __CFD1U:
000252 9468      	SET
000253 c001      	RJMP __CFD1U0
                 __CFD1:
000254 94e8      	CLT
                 __CFD1U0:
000255 935f      	PUSH R21
000256 dff2      	RCALL __UNPACK1
000257 3870      	CPI  R23,0x80
000258 f018      	BRLO __CFD10
000259 3f7f      	CPI  R23,0xFF
00025a f408      	BRCC __CFD10
00025b c04b      	RJMP __ZERORES
                 __CFD10:
00025c e156      	LDI  R21,22
00025d 1b57      	SUB  R21,R23
00025e f4aa      	BRPL __CFD11
00025f 9551      	NEG  R21
000260 3058      	CPI  R21,8
000261 f40e      	BRTC __CFD19
000262 3059      	CPI  R21,9
                 __CFD19:
000263 f030      	BRLO __CFD17
000264 efef      	SER  R30
000265 efff      	SER  R31
000266 ef6f      	SER  R22
000267 e77f      	LDI  R23,0x7F
000268 f977      	BLD  R23,7
000269 c01a      	RJMP __CFD15
                 __CFD17:
00026a 2777      	CLR  R23
00026b 2355      	TST  R21
00026c f0b9      	BREQ __CFD15
                 __CFD18:
00026d 0fee      	LSL  R30
00026e 1fff      	ROL  R31
00026f 1f66      	ROL  R22
000270 1f77      	ROL  R23
000271 955a      	DEC  R21
000272 f7d1      	BRNE __CFD18
000273 c010      	RJMP __CFD15
                 __CFD11:
000274 2777      	CLR  R23
                 __CFD12:
000275 3058      	CPI  R21,8
000276 f028      	BRLO __CFD13
000277 2fef      	MOV  R30,R31
000278 2ff6      	MOV  R31,R22
000279 2f67      	MOV  R22,R23
00027a 5058      	SUBI R21,8
00027b cff9      	RJMP __CFD12
                 __CFD13:
00027c 2355      	TST  R21
00027d f031      	BREQ __CFD15
                 __CFD14:
00027e 9576      	LSR  R23
00027f 9567      	ROR  R22
000280 95f7      	ROR  R31
000281 95e7      	ROR  R30
000282 955a      	DEC  R21
000283 f7d1      	BRNE __CFD14
                 __CFD15:
000284 2000      	TST  R0
000285 f40a      	BRPL __CFD16
000286 d07b      	RCALL __ANEGD1
                 __CFD16:
000287 915f      	POP  R21
000288 9508      	RET
                 
                 __CDF1U:
000289 9468      	SET
00028a c001      	RJMP __CDF1U0
                 __CDF1:
00028b 94e8      	CLT
                 __CDF1U0:
00028c 9730      	SBIW R30,0
00028d 4060      	SBCI R22,0
00028e 4070      	SBCI R23,0
00028f f0b1      	BREQ __CDF10
000290 2400      	CLR  R0
000291 f026      	BRTS __CDF11
000292 2377      	TST  R23
000293 f412      	BRPL __CDF11
000294 9400      	COM  R0
000295 d06c      	RCALL __ANEGD1
                 __CDF11:
000296 2e17      	MOV  R1,R23
000297 e17e      	LDI  R23,30
000298 2011      	TST  R1
                 __CDF12:
000299 f032      	BRMI __CDF13
00029a 957a      	DEC  R23
00029b 0fee      	LSL  R30
00029c 1fff      	ROL  R31
00029d 1f66      	ROL  R22
00029e 1c11      	ROL  R1
00029f cff9      	RJMP __CDF12
                 __CDF13:
0002a0 2fef      	MOV  R30,R31
0002a1 2ff6      	MOV  R31,R22
0002a2 2d61      	MOV  R22,R1
0002a3 935f      	PUSH R21
0002a4 df8a      	RCALL __REPACK
0002a5 915f      	POP  R21
                 __CDF10:
0002a6 9508      	RET
                 
                 __ZERORES:
0002a7 27ee      	CLR  R30
0002a8 27ff      	CLR  R31
0002a9 2766      	CLR  R22
0002aa 2777      	CLR  R23
0002ab 915f      	POP  R21
0002ac 9508      	RET
                 
                 __MINRES:
0002ad efef      	SER  R30
0002ae efff      	SER  R31
0002af e76f      	LDI  R22,0x7F
0002b0 ef7f      	SER  R23
0002b1 915f      	POP  R21
0002b2 9508      	RET
                 
                 __MAXRES:
0002b3 efef      	SER  R30
0002b4 efff      	SER  R31
0002b5 e76f      	LDI  R22,0x7F
0002b6 e77f      	LDI  R23,0x7F
0002b7 915f      	POP  R21
0002b8 9508      	RET
                 
                 __DIVF21:
0002b9 935f      	PUSH R21
0002ba df86      	RCALL __UNPACK
0002bb 3870      	CPI  R23,0x80
0002bc f421      	BRNE __DIVF210
0002bd 2011      	TST  R1
                 __DIVF211:
0002be f40a      	BRPL __DIVF219
0002bf cfed      	RJMP __MINRES
                 __DIVF219:
0002c0 cff2      	RJMP __MAXRES
                 __DIVF210:
0002c1 3890      	CPI  R25,0x80
0002c2 f409      	BRNE __DIVF218
                 __DIVF217:
0002c3 cfe3      	RJMP __ZERORES
                 __DIVF218:
0002c4 2401      	EOR  R0,R1
0002c5 9408      	SEC
0002c6 0b97      	SBC  R25,R23
0002c7 f41b      	BRVC __DIVF216
0002c8 f3d4      	BRLT __DIVF217
0002c9 2000      	TST  R0
0002ca cff3      	RJMP __DIVF211
                 __DIVF216:
0002cb 2f79      	MOV  R23,R25
0002cc 931f      	PUSH R17
0002cd 932f      	PUSH R18
0002ce 933f      	PUSH R19
0002cf 934f      	PUSH R20
0002d0 2411      	CLR  R1
0002d1 2711      	CLR  R17
0002d2 2722      	CLR  R18
0002d3 2733      	CLR  R19
0002d4 2744      	CLR  R20
0002d5 2755      	CLR  R21
0002d6 e290      	LDI  R25,32
                 __DIVF212:
0002d7 17ae      	CP   R26,R30
0002d8 07bf      	CPC  R27,R31
0002d9 0786      	CPC  R24,R22
0002da 0741      	CPC  R20,R17
0002db f030      	BRLO __DIVF213
0002dc 1bae      	SUB  R26,R30
0002dd 0bbf      	SBC  R27,R31
0002de 0b86      	SBC  R24,R22
0002df 0b41      	SBC  R20,R17
0002e0 9408      	SEC
0002e1 c001      	RJMP __DIVF214
                 __DIVF213:
0002e2 9488      	CLC
                 __DIVF214:
0002e3 1f55      	ROL  R21
0002e4 1f22      	ROL  R18
0002e5 1f33      	ROL  R19
0002e6 1c11      	ROL  R1
0002e7 1faa      	ROL  R26
0002e8 1fbb      	ROL  R27
0002e9 1f88      	ROL  R24
0002ea 1f44      	ROL  R20
0002eb 959a      	DEC  R25
0002ec f751      	BRNE __DIVF212
0002ed 01f9      	MOVW R30,R18
0002ee 2d61      	MOV  R22,R1
0002ef 914f      	POP  R20
0002f0 913f      	POP  R19
0002f1 912f      	POP  R18
0002f2 911f      	POP  R17
0002f3 2366      	TST  R22
0002f4 f032      	BRMI __DIVF215
0002f5 0f55      	LSL  R21
0002f6 1fee      	ROL  R30
0002f7 1fff      	ROL  R31
0002f8 1f66      	ROL  R22
0002f9 957a      	DEC  R23
0002fa f243      	BRVS __DIVF217
                 __DIVF215:
0002fb df29      	RCALL __ROUND_REPACK
0002fc 915f      	POP  R21
0002fd 9508      	RET
                 
                 __ANEGW1:
0002fe 95f1      	NEG  R31
0002ff 95e1      	NEG  R30
000300 40f0      	SBCI R31,0
000301 9508      	RET
                 
                 __ANEGD1:
000302 95f0      	COM  R31
000303 9560      	COM  R22
000304 9570      	COM  R23
000305 95e1      	NEG  R30
000306 4fff      	SBCI R31,-1
000307 4f6f      	SBCI R22,-1
000308 4f7f      	SBCI R23,-1
000309 9508      	RET
                 
                 __CWD1:
00030a 2f6f      	MOV  R22,R31
00030b 0f66      	ADD  R22,R22
00030c 0b66      	SBC  R22,R22
00030d 2f76      	MOV  R23,R22
00030e 9508      	RET
                 
                 __DIVB21U:
00030f 2400      	CLR  R0
000310 e098      	LDI  R25,8
                 __DIVB21U1:
000311 0faa      	LSL  R26
000312 1c00      	ROL  R0
000313 1a0e      	SUB  R0,R30
000314 f410      	BRCC __DIVB21U2
000315 0e0e      	ADD  R0,R30
000316 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000317 60a1      	SBR  R26,1
                 __DIVB21U3:
000318 959a      	DEC  R25
000319 f7b9      	BRNE __DIVB21U1
00031a 2fea      	MOV  R30,R26
00031b 2da0      	MOV  R26,R0
00031c 9508      	RET
                 
                 __DIVW21U:
00031d 2400      	CLR  R0
00031e 2411      	CLR  R1
00031f e190      	LDI  R25,16
                 __DIVW21U1:
000320 0faa      	LSL  R26
000321 1fbb      	ROL  R27
000322 1c00      	ROL  R0
000323 1c11      	ROL  R1
000324 1a0e      	SUB  R0,R30
000325 0a1f      	SBC  R1,R31
000326 f418      	BRCC __DIVW21U2
000327 0e0e      	ADD  R0,R30
000328 1e1f      	ADC  R1,R31
000329 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00032a 60a1      	SBR  R26,1
                 __DIVW21U3:
00032b 959a      	DEC  R25
00032c f799      	BRNE __DIVW21U1
00032d 01fd      	MOVW R30,R26
00032e 01d0      	MOVW R26,R0
00032f 9508      	RET
                 
                 __DIVW21:
000330 d015      	RCALL __CHKSIGNW
000331 dfeb      	RCALL __DIVW21U
000332 f40e      	BRTC __DIVW211
000333 dfca      	RCALL __ANEGW1
                 __DIVW211:
000334 9508      	RET
                 
                 __MODB21U:
000335 dfd9      	RCALL __DIVB21U
000336 2fea      	MOV  R30,R26
000337 9508      	RET
                 
                 __MODW21:
000338 94e8      	CLT
000339 ffb7      	SBRS R27,7
00033a c004      	RJMP __MODW211
00033b 95a0      	COM  R26
00033c 95b0      	COM  R27
00033d 9611      	ADIW R26,1
00033e 9468      	SET
                 __MODW211:
00033f fdf7      	SBRC R31,7
000340 dfbd      	RCALL __ANEGW1
000341 dfdb      	RCALL __DIVW21U
000342 01fd      	MOVW R30,R26
000343 f40e      	BRTC __MODW212
000344 dfb9      	RCALL __ANEGW1
                 __MODW212:
000345 9508      	RET
                 
                 __CHKSIGNW:
000346 94e8      	CLT
000347 fff7      	SBRS R31,7
000348 c002      	RJMP __CHKSW1
000349 dfb4      	RCALL __ANEGW1
00034a 9468      	SET
                 __CHKSW1:
00034b ffb7      	SBRS R27,7
00034c c006      	RJMP __CHKSW2
00034d 95a0      	COM  R26
00034e 95b0      	COM  R27
00034f 9611      	ADIW R26,1
000350 f800      	BLD  R0,0
000351 9403      	INC  R0
000352 fa00      	BST  R0,0
                 __CHKSW2:
000353 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  26 r1 :  16 r2 :   0 r3 :   0 r4 :   4 r5 :   8 r6 :   5 r7 :   0 
r8 :   2 r9 :   0 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   9 r18:   5 r19:   4 r20:   6 r21:  40 r22:  34 r23:  32 
r24:  15 r25:  17 r26:  60 r27:  18 r28:   4 r29:   1 r30: 156 r31:  54 
x  :   3 y  :  44 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :   8 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :   9 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   1 brmi  :   3 brne  :  16 brpl  :   5 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  50 
cbi   :  11 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 
cp    :   6 cpc   :   5 cpi   :  12 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   4 jmp   :  31 ld    :  12 ldd   :   7 ldi   :  86 
lds   :   0 lpm   :   9 lsl   :  11 lsr   :   1 mov   :  25 movw  :  16 
mul   :   0 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   2 out   :  24 pop   :  12 push  :  11 rcall :  30 ret   :  28 
reti  :   0 rjmp  :  33 rol   :  23 ror   :   7 sbc   :   6 sbci  :   7 
sbi   :  13 sbic  :   3 sbis  :   3 sbiw  :   8 sbr   :   2 sbrc  :   2 
sbrs  :   4 sec   :   2 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   2 sts   :   2 sub   :   4 subi  :   5 swap  :   2 
tst   :  10 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006a8   1600    104   1704   16384  10.4%
[.dseg] 0x000060 0x000164      0      4      4    1119   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
